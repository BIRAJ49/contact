name: Deploy to EC2

on:
  push:
    branches: ["main"]

    paths:
      - "client/**"
      - "server/**"
      - ".github/workflows/deploy.yml"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18

      #Build frontend
      - name: Install client deps
        run: npm ci --prefix client

      - name: Build client
        run: npm run build --prefix client

      #  Package artifacts
      - name: Tar client build
        run: tar -C client -czf client-dist.tar.gz dist

      - name: Tar server code (exclude node_modules)
        run: tar --exclude='server/node_modules' -czf server.tar.gz server

      # Quick SSH connectivity probe (helps debug auth issues)
      - name: Test SSH connectivity
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: 'echo "Connected to $(hostname) as $(whoami)"; ls -la /var/www || true'

      # Copy artifacts to EC2
      - name: Copy artifacts to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "client-dist.tar.gz,server.tar.gz"
          target: "/var/www/contact"

      #  Remote deploy on EC2
      - name: SSH deploy on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -e
            cd /var/www/contact

            # Frontend: unpack to client-dist/
            rm -rf client-dist && mkdir -p client-dist
            tar -xzf client-dist.tar.gz -C client-dist --strip-components=1

            # Backend: unpack to server/
            rm -rf server && mkdir -p server
            tar -xzf server.tar.gz

            # Ensure .env exists (kept on server)
            if [ ! -f server/.env ]; then
              echo "PORT=4000" > server/.env
              echo "DATABASE_URL=${{ secrets.DB_URL }}" >> server/.env
            fi

            # Install deps & migrate DB
            npm ci --prefix server || npm install --prefix server
            npm run migrate --prefix server

            # Start/Restart API with PM2 from server dir
            if pm2 status contact-api >/dev/null 2>&1; then
              pm2 restart contact-api
            else
              pm2 start "npm start" --name contact-api --cwd /var/www/contact/server
              pm2 save
            fi

            # Reload nginx
            sudo nginx -t && sudo systemctl reload nginx

      #  Health check (fail pipeline if API is down)
      - name: Health check API (localhost)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -e
            curl -fsS http://127.0.0.1:4000/api/contacts >/dev/null
            echo "API healthy on 127.0.0.1:4000"
